// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator zod {
  provider          = "zod-prisma-types"
  useMultipleFiles  = true
  writeBarrelFiles  = false
  useTypeAssertions = true
  output            = "../../shared/validation"
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  password     String
  name         String
  avatarUrl    String?
  headerUrl    String?
  biography    String?
  recipes      Recipe[]
  comments     Comment[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  RefreshToken RefreshToken[]
  Like         Like[]
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Recipe {
  id          Int          @id @default(autoincrement())
  user        User         @relation(fields: [userId], references: [id])
  userId      Int
  title       String
  description String
  imageUrl    String?
  cookTime    Int?
  servings    Int?
  difficulty  Difficulty?
  category    String?
  ingredients Ingredient[]
  steps       Step[]
  tags        Tag[]        @relation("RecipeTags")
  comments    Comment[]
  likes       Like[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model Tag {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  recipes Recipe[] @relation("RecipeTags")
}

model Comment {
  id        Int      @id @default(autoincrement())
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  recipeId  Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ingredient {
  id       Int     @id @default(autoincrement())
  name     String
  amount   Float?
  unit     String?
  recipe   Recipe  @relation(fields: [recipeId], references: [id])
  recipeId Int
}

model Step {
  id       Int     @id @default(autoincrement())
  order    Int
  title    String
  content  String?
  recipe   Recipe  @relation(fields: [recipeId], references: [id])
  recipeId Int
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  recipeId  Int
  createdAt DateTime @default(now())

  @@unique([userId, recipeId])
}
